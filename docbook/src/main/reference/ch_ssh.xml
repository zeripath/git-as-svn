<?xml version="1.0" encoding="UTF-8"?>
<chapter version="5.0" xml:id="ch_ssh" xml:lang="en_US"
         xmlns="http://docbook.org/ns/docbook"
         xmlns:xlink="http://www.w3.org/1999/xlink"
         xmlns:xi="http://www.w3.org/2001/XInclude"
         xmlns:svg="http://www.w3.org/2000/svg"
         xmlns:m="http://www.w3.org/1998/Math/MathML"
         xmlns:html="http://www.w3.org/1999/xhtml"
         xmlns:db="http://docbook.org/ns/docbook">
    <title>SVN+SSH</title>
    <section>
        <title>Rationale</title>
        <para>The SVN protocol is totally unencrypted, and due to the way
        git-as-svn has to proxy authentication through to git servers,
        almost all authentication happens in plaintext.</para>
        <para>Clearly this is undesirable, not only is potentially private
        code exposed over the svn protocol, but so are passwords and
        usernames.</para>
        <para>Traditionally SVN has two ways of preventing this:</para>
        <itemizedlist>
            <listitem>
                <para>Use HTTPS</para>
            </listitem>
            <listitem>
                <para>Use svn+ssh</para>
            </listitem>
        </itemizedlist>
        <para>The HTTP protocol is substantially different from the SVN
        protocol and is currently unimplemented in git-as-svn</para>
        <para>Thus leaving the svn+ssh mechanism.</para>
    </section>
    <section>
        <title>How does SVN+SSH work?</title>
        <para>Normally when a client calls
        <code>svn &lt;command&gt; svn://host/path</code>, for an appropriate
        <code>&lt;command&gt;</code>, the subversion client will open a 
        connection to the <code>host</code> server on port 3690. After an
        initial handshake as per the SVN protocol the server will ask the
        client to authenticate.</para>
        <para>If possible the client will attempt to perform its actions
        anonymously, and if necessary the server will then ask for
        reauthentication.</para>
        <para>If a client calls
        <code>svn &lt;command&gt; svn+ssh//username@host/path</code>,
        the subversion client will internally ask ssh to open connection
        using something equivalent to:
        <code>ssh username@host "svnserve -t"</code>.</para>
        <para>If ssh succesfully connects, the SSH will run
        <code>svnserve -t</code> on the host, which will then proceed with
        the SVN protocol handshake over its <code>stdin</code> and
        <code>stdout</code>, and the client will use the <code>stdin</code>
        and <code>stdout</code> of the ssh connection.</para>
        <para>When the server asks the client to authenticate, the server
        will offer the <code>EXTERNAL</code> authentication mechanism.
        (Possibly with the <code>ANONYMOUS</code> mechanism.)</para>
        <para>If the client uses <code>EXTERNAL</code> mechanism, the
        server sets the user to be either the currently logged in user
        from the ssh, (or an optional tunnel-user parameter.)</para>
        <para>Securing the <code>svnserve -t</code> call and protecting
        against semi-malicious uses of the <code>--tunnel-user</code>
        option or even the calling of other commands in cases of multiple
        users for a single repository requires some thought.</para>
        <para>Often this is protected through the use of a suitable
        <code>command=""</code> parameter in the
        <code>authorized_keys</code> file, coupled with other options.
        e.g.</para>
        <para><code>command="/usr/bin/svnserve -t --tunnel-user username",no-port-forwarding,no-X11-forwarding,no-agent-forwarding,no-pty ssh-rsa ...</code></para>
        <para>Of note, in this example the command provided by the client
        is ignored but it could be checked and managed as appropriately.
        In fact these techniques are used in the
        <code>authorized_keys</code> files of most <code>git</code>
        servers.</para>
        <para>This provides a simple first way to handle
        <code>svn+ssh</code>, if we set
        <code>command="nc localhost 3690"</code> then whenever we connect
        by ssh we will be passed directly to the git-as-svn server. The
        downside being that the client will be asked to
        authenticate.</para>
    </section>
    <section>
        <title>A better <code>git-as-svn-svnserve</code></title>
        <para>Handling the <code>EXTERNAL</code> authentication mechanism
        properly without creating a new port to listen on and a new
        adjusted SVN protocol is not possible.</para>
        <para>However there is another way:</para>
        <para>We can stand in the middle of the SVN protocol stream, catch
        the authentication handshake, proxy it before stepping back and
        letting the client and server talk to each other.</para>
        <para>We can create a new authentication mechanism on the
        <code>git-as-svn</code> server that requires a secret token known
        only by us, to allow us to pass in the external username (or other
        identifier) as the user authentication using
        <code>sshKeyUsers</code> to proxy the <code>UserDB</code></para>
        <para>We can then use 
        <code>git-as-svn-svnserve-tunnel SECRET EXTERNAL_USERNAME</code> as
        a replacement for <code>svnserve -t</code> or 
        <code>nc localhost 3690</code> in the <code>command=""</code>
        option in authorized_keys.</para>
        <para>Of course we need to keep the 
        <code>authorized_keys</code> file up-to-date</para>
    </section>
    <section>
        <title>Gitlab &amp; git-as-svn-svnserve</title>
        <para>There are two ways that Gitlab manages ssh access.</para>
        <itemizedlist>
            <listitem>
                <para>Updating the git user's <code>authorized_keys</code>
                every time a SSH key is changed.</para>
            </listitem>
            <listitem>
                <para>The use of an SSH
                <code>AuthorizedKeysCommand</code></para>
            </listitem>
        </itemizedlist>
        <para>First, let's look at the <code>authorized_keys</code>
        case.</para>
        <para>Gitlab will update the <code>authorized_keys</code> file
        over time.</para>
        <para>If you set the option:
        <code>gitlab_shell['auth_file']</code> in the
        <code>gitlab.rb</code> configuration file to a different
        location, you can catch changes to this file, and change the
        <code>command=""</code> option to something that will check 
        whether we are trying to perform svn and handle it if so.</para>
        <para>The suggested config, at least for Gitlab docker and 
        assuming that git-as-svn has been installed in
        <code>/opt/git-as-svn</code> is:</para>
        <itemizedlist>
        <listitem>
        <para><code>/etc/gitlab/gitlab.rb</code>:
        </para>
        <programlisting xml:lang="ruby"><![CDATA[
...
################################################################################
## gitlab-shell
################################################################################
...
# gitlab_shell['auth_file'] = "/var/opt/gitlab/.ssh/authorized_keys"
gitlab_shell['auth_file'] = "/var/opt/gitlab/ssh-shadow/authorized_keys"
...
        ]]></programlisting>
        </listitem>
        <listitem>
        <para><code>/opt/git-as-svn/config.yaml</code>:
        </para>
        <programlisting xml:lang="yaml"><![CDATA[
!config:
realm: Git-as-svn Realm
compressionEnabled: true
parallelIndexing: true

# Use GitLab repositories
repositoryMapping: !gitlabMapping
  path: /var/opt/gitlab/git-data/repositories/
  # Uncomment following to only handle repositories with specified tags (add them to repositories via Settings -> General -> Tags in GitLab)
  # repositoryTags:
  #   - git-as-svn
  template:
    branch: master
    renameDetection: true

# Wrap the Gitlab user database with sshKeyUsers
userDB: 
  !sshKeyUsers
    userDB: !gitlabUsers {}
    sshKeysToken: CHANGE_THIS_TO_SOMETHING_SECRET

shared:
  # Web server settings
  # Used for:
  #  * detecticting add/remove repositories via GitLab System Hook
  #  * git-lfs-authenticate script (optionaly)
  - !web
    baseUrl: http://git-as-svn.local/
    listen:
    - !http
      host: localhost
      port: 8123
      # Use X-Forwarded-* headers
      forwarded: true
  # GitLab LFS server
  - !lfs
    # Secret token for git-lfs-authenticate script
    # secretToken:
    path: /mnt/storage/lfs-objects
    saveMeta: false
    compress: false
    layout: GitLab
  # GitLab server
  - !gitlab
    url: http://localhost:3000/
    hookUrl: http://localhost:8123/
    token: qytzQc6uYiQfsoqJxGuG
  # Manage authorized_keys
  - !sshKeys
    shadowSSHDirectory: /var/opt/gitlab/ssh-shadow
    realSSHDirectory: /var/opt/gitlab/.ssh
    originalAppPath: /opt/gitlab/embedded/service/gitlab-shell/bin/gitlab-shell
    svnservePath: /opt/git-as-svn/bin/git-as-svn-svnserve
        ]]></programlisting>
        </listitem>
        <listitem>
        <para><code>/opt/git-as-svn/bin/git-as-svn-svnserve</code>:
        </para>
        <programlisting xml:lang="bash"><![CDATA[
#!/bin/bash

############################################################
# git-as-svn-svnserve
#
# Shadow the default gitlab/gitea shell and allow svnserve
############################################################

SHADOW_SHELL_PATH="/opt/gitlab/embedded/service/gitlab-shell/bin/gitlab-shell"
TUNNEL_PATH="/opt/git-as-svn/bin/git-as-svn-svnserve-tunnel"
KEY="\$1"
REAL_SHELL_PATH="\$SHADOW_SHELL_PATH"
SECRET="CHANGE_THIS_TO_SOMETHING_SECRET"

SSH_ORIGINAL_COMMANDS=(\$SSH_ORIGINAL_COMMAND)

if [ -n "\$SSH_ORIGINAL_COMMAND" ] && [ "\${SSH_ORIGINAL_COMMANDS[0]}" = "svnserve" ] ; then
    ## TUNNEL TO OUR SVNSERVER WITH MAGIC AUTHENTICATION ##
    exec "\$TUNNEL_PATH" "\$SECRET" "\$KEY"
else
    exec -a "\$REAL_SHELL_PATH" "\$SHADOW_SHELL_PATH" "\$@"
fi
        ]]></programlisting>
        </listitem>
        <listitem>
        <para><code>/opt/git-as-svn/bin/git-as-svn-svnserve-tunnel</code>:</para>
        <programlisting xml:lang="bash"><![CDATA[
#!/bin/bash

############################################################
# git-as-svn-svnserve-tunnel
#
# Use a bit of bash hackery to implement svnserve -t by
# pushing stdin to the svn port (3690) but hijack the 
# authentication phase to pass in the ssh key id
############################################################

SECRET="\$1"
KEY="\$2"
FAKE_AUTH="( success ( ( EXTERNAL ) 16:Git-as-svn Realm ) )"

function failed {
    echo "\$0: Unable to connect to svn service! Is it running?" 1>&2
    exit
}
trap failed err

OUR_PID=\$\$
function finish {
    pkill -P \$OUR_PID
    exec 3>&- 3<&-
}
trap finish EXIT

exec 3<>/dev/tcp/localhost/3690

trap finish err

function read_bracket {
    BEEN_IN=false
    NBRACK=0

    while ! \$BEEN_IN || [ \$NBRACK != 0 ]; do
        IFS= read -n1 -r -d '' FROM
        case \$FROM in
            '(')
            NBRACK=\$((\$NBRACK + 1))
            BEEN_IN=true
            ;;
            ')')
            NBRACK=\$((\$NBRACK - 1))
            ;;
            '')
            break
        esac
        echo -ne "\$FROM"
    done
    IFS= read -n1 -r -d '' FROM
    echo -ne "\$FROM"
    if [ "X\$FROM" = "X" ]; then
        exec 0<&-
        exit
    fi
}

# Send server capabilities to client
read_bracket <&3 >&1

# Send client capabilities to server
read_bracket <&0 >&3

# Get the server authentication
AUTH_LIST_FROM_SERV=\$(read_bracket <&3)

# Send the server our information
AUTHBODY=\$(echo -ne "\\0\$SECRET\\0\$KEY" | base64)
AUTHBODY_LENGTH=\${#AUTHBODY}
echo "( KEY-AUTHENTICATOR ( \$AUTHBODY_LENGTH:\$AUTHBODY ) )" >&3
if ! { command >&3; } 2>/dev/null; then
    exit
fi

# send the fake auth list to the client
echo "\$FAKE_AUTH" >&1
if ! { command >&1; } 2>/dev/null; then
    exit
fi

# throwaway the client's response
read_bracket <&0 > /dev/null

# THEN PRETEND THAT THE REST OF IT WENT THAT WAY
(
    cat <&3 >&1 &
    CAT_PID=\$!
    function on_exit {
        kill \$CAT_PID
    }
    trap on_exit EXIT
    wait
    kill \$OUR_PID
) &

cat <&0 >&3
pkill -P \$OUR_PID
        ]]></programlisting>
        </listitem>
        </itemizedlist>
        <para>In the second case, if we proxy the
        <code>AuthorizedKeysCommand</code>, and just replace the
        <code>command=""</code> option as above then we have a working
        solution.</para>
        <itemizedlist>
        <listitem>
        <para><code>/assets/sshd_config</code>:</para>
        <programlisting xml:lang="sshd_config"><![CDATA[
...
# AuthorizedKeysCommand /opt/gitlab/embedded/service/gitlab-shell/bin/gitlab-shell-authorized-keys-check git %u %k
# AuthorizedKeysCommandUser git
AuthorizedKeysCommand /opt/git-as-svn/bin/git-as-svn-authorized-keys-command git %u %k
AuthorizedKeysCommandUser git
...
        ]]></programlisting>
        </listitem>
        <listitem>
        <para><code>/opt/git-as-svn/bin/git-as-svn-authorized-keys-command</code>:</para>
        <programlisting xml:lang="bash"><![CDATA[
#!/bin/bash

############################################################
# git-as-svn-authorized-keys_command
#
# Shadow the default ssh AuthorizedKeysComand and adjust its
# output to replace the original command with our svnserve
############################################################

############################################################
# For Gitlab Docker:
############################################################
ORIGINAL_AUTHORIZED_COMMAND="/opt/gitlab/embedded/service/gitlab-shell/bin/gitlab-shell-authorized-keys-check"
ORIGINAL_APP_PATH="/opt/gitlab/embedded/service/gitlab-shell/bin/gitlab-shell"
SVN_SERVE_PATH="/opt/git-as-svn/bin/git-as-svn-svnserve"

############################################################
# Gitea does not have AuthorizedKeysCommand at present
############################################################

exec -a "\$ORIGINAL_AUTHORIZED_COMMAND"  "\$ORIGINAL_AUTHORIZED_COMMAND" "\$@" | sed -e 's|command="'"\$ORIGINAL_APP_PATH"'|command="'"\$SVN_SERVE_PATH"'|'
        ]]></programlisting>
        </listitem>
        <listitem>
        <para><code>/opt/git-as-svn/config.yaml</code>:</para>
        <programlisting xml:lang="yaml"><![CDATA[
!config:
realm: Git-as-svn Realm
compressionEnabled: true
parallelIndexing: true

# Use GitLab repositories
repositoryMapping: !gitlabMapping
  path: /var/opt/gitlab/git-data/repositories/
  # Uncomment following to only handle repositories with specified tags (add them to repositories via Settings -> General -> Tags in GitLab)
  # repositoryTags:
  #   - git-as-svn
  template:
    branch: master
    renameDetection: true

# Wrap the Gitlab user database with sshKeyUsers
userDB: 
  !sshKeyUsers
    userDB: !gitlabUsers {}
    sshKeysToken: CHANGE_THIS_TO_SOMETHING_SECRET

shared:
  # Web server settings
  # Used for:
  #  * detecticting add/remove repositories via GitLab System Hook
  #  * git-lfs-authenticate script (optionaly)
  - !web
    baseUrl: http://git-as-svn.local/
    listen:
    - !http
      host: localhost
      port: 8123
      # Use X-Forwarded-* headers
      forwarded: true
  # GitLab LFS server
  - !lfs
    # Secret token for git-lfs-authenticate script
    # secretToken:
    path: /mnt/storage/lfs-objects
    saveMeta: false
    compress: false
    layout: GitLab
  # GitLab server
  - !gitlab
    url: http://localhost:3000/
    hookUrl: http://localhost:8123/
    token: qytzQc6uYiQfsoqJxGuG
        ]]></programlisting>
        </listitem>
        <listitem>
        <para><code>/opt/git-as-svn/bin/git-as-svn-svnserve</code> and
        <code>/opt/git-as-svn/bin/git-as-svn-svnserve-tunnel</code> same
        as above.</para>
        </listitem>
        </itemizedlist>
    </section>
    <section>
        <title>Gitea</title>
        <para>There are two ways that Gitea manages ssh access.</para>
        <itemizedlist>
            <listitem>
                <para>If Gitea is deferring to an external SSHD. It will 
                update the git user's <code>authorized_keys</code>
                every time a SSH key is changed.</para>
            </listitem>
            <listitem>
                <para>If Gitea is using its own internal SSHD. It will
                run the <code>gitea serv</code> command each time.</para>
            </listitem>
        </itemizedlist>
        <para>First, let's look at the <code>authorized_keys</code>
        case.</para>
        <para>Gitea will update the <code>authorized_keys</code> file
        over time.</para>
        <para>If you set the option:
        <code>SSH_ROOT_PATH</code> in the <code>[server]</code> of the 
        gitea <code>app.ini</code> to a shadow location you can catch
        changes to this file, and change the
        <code>command=""</code> option to something that will check 
        whether we are trying to perform svn and handle it if so.</para>
        <para>The suggested config, at least for Gitea docker, and 
        assuming that git-as-svn has been installed in
        <code>/app/git-as-svn</code> is:</para>
        <itemizedlist>
            <listitem>
        <para><code>/data/gitea/conf/app.ini</code>:</para>
        <programlisting xml:lang="ini"><![CDATA[
...
[server]
...
SSH_ROOT_PATH=/data/git/ssh-shadow
...
        ]]></programlisting>
        </listitem>
        <listitem>
        <para><code>/app/git-as-svn/config.yaml</code>:</para>
        <programlisting xml:lang="yaml"><![CDATA[
!config:
realm: Git-as-svn Realm
compressionEnabled: true
parallelIndexing: true

# Use Gitea repositories
repositoryMapping: !giteaMapping
  path: /data/git/repositories
  template:
    branch: master
    renameDetection: true

# Use Gitea user database
userDB:
  !sshKeyUsers
    userDB: !giteaUsers {}
    sshKeysToken: CHANGE_THIS_TO_SOMETHING_SECRET

shared:
  # Gitea LFS server - uses the GitLab layout
  - !lfs
    path: /data/git/lfs
    saveMeta: false
    compress: false
    layout: GitLab
  # Gitea server
  - !gitea
    url: http://localhost:3000/api/v1
    #token: de0c16fdc2c2ec5bcb4917922900015d3bceb82b
    token: 90c68b84fb04e364c2ea3fc42a6a2193144bc07d
  - !giteaSSHKeys
    shadowSSHDirectory: /data/git/ssh-shadow
    realSSHDirectory: /data/git/.ssh
    originalAppPath: /app/gitea/gitea
    svnservePath: /app/gitea/git-as-svn-svnserve    
        ]]></programlisting>
        </listitem>
        <listitem>
        <para><code>/app/git-as-svn/bin/git-as-svn-svnserve</code>:</para>
        <programlisting xml:lang="bash"><![CDATA[
#!/bin/bash

############################################################
# git-as-svn-svnserve
#
# Shadow the default gitlab/gitea shell and allow svnserve
############################################################

SHADOW_SHELL_PATH="/app/gitea/gitea"
TUNNEL_PATH="/app/git-as-svn/bin/git-as-svn-svnserve-tunnel"
KEY="\$2"
SUBCOMMAND="\$1"
REAL_SHELL_PATH="\$SHADOW_SHELL_PATH"

if [ "\$SUBCOMMAND" != "serv" ]; then
    exec -a "\$REAL_SHELL_PATH" "\$SHADOW_SHELL_PATH" "\$@"
fi

SECRET="CHANGE_THIS_TO_SOMETHING_SECRET"

SSH_ORIGINAL_COMMANDS=(\$SSH_ORIGINAL_COMMAND)

if [ -n "\$SSH_ORIGINAL_COMMAND" ] && [ "\${SSH_ORIGINAL_COMMANDS[0]}" = "svnserve" ] ; then
    ## TUNNEL TO OUR SVNSERVER WITH MAGIC AUTHENTICATION ##
    exec "\$TUNNEL_PATH" "\$SECRET" "\$KEY"
else
    exec -a "\$REAL_SHELL_PATH" "\$SHADOW_SHELL_PATH" "\$@"
fi
        ]]></programlisting>
        </listitem>
        <listitem>
        <para><code>/app/git-as-svn/bin/git-as-svn-svnserve-tunnel</code>
        should be the same as in the gitlab case.</para>
        </listitem>
        </itemizedlist>
        <para>For the second case, we need to shadow the gitea binary</para>
        <para>So we would need to move the original gitea from
        <code>/app/gitea/gitea</code> to <code>/app/gitea/gitea.shadow</code></para>
        <para>And either create <code>/app/gitea/gitea</code> as a symbolic
        link or just copy the below
        <code>/app/git-as-svn/bin/git-as-svn-svnserve</code> as it.
        </para>
        <para><code>/app/git-as-svn/bin/git-as-svn-svnserve</code>:
        <programlisting xml:lang="bash"><![CDATA[
#!/bin/bash

############################################################
# git-as-svn-svnserve
#
# Shadow the default gitlab/gitea shell and allow svnserve
############################################################

SHADOW_SHELL_PATH="/app/gitea/gitea.shadow"
TUNNEL_PATH="/app/git-as-svn/bin/git-as-svn-svnserve-tunnel"
KEY="\$2"
SUBCOMMAND="\$1"
REAL_SHELL_PATH="/app/gitea/gitea"

if [ "\$SUBCOMMAND" != "serv" ]; then
    exec -a "\$REAL_SHELL_PATH" "\$SHADOW_SHELL_PATH" "\$@"
fi

SECRET="CHANGE_THIS_TO_SOMETHING_SECRET"

SSH_ORIGINAL_COMMANDS=(\$SSH_ORIGINAL_COMMAND)

if [ -n "\$SSH_ORIGINAL_COMMAND" ] && [ "\${SSH_ORIGINAL_COMMANDS[0]}" = "svnserve" ] ; then
    ## TUNNEL TO OUR SVNSERVER WITH MAGIC AUTHENTICATION ##
    exec "\$TUNNEL_PATH" "\$SECRET" "\$KEY"
else
    exec -a "\$REAL_SHELL_PATH" "\$SHADOW_SHELL_PATH" "\$@"
fi
        ]]></programlisting>
        </para>
        <para><code>/app/git-as-svn/bin/git-as-svn-svnserve-tunnel</code>
        should be the same as in the gitlab case.</para>
        <para>At present there is no way to use an SSH
        <code>AuthorizedKeysCommand</code> with Gitea.</para>
    </section>
</chapter>